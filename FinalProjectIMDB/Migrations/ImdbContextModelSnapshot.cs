// <auto-generated />
using FinalProjectIMDB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProjectIMDB.Migrations
{
    [DbContext(typeof(ImdbContext))]
    partial class ImdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalProjectIMDB.Models.Director", b =>
                {
                    b.Property<string>("TitleId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("titleID");

                    b.Property<string>("NameId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("nameID");

                    b.HasKey("TitleId", "NameId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("FinalProjectIMDB.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("GenreId")
                        .HasName("PK_Title_Genres");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("FinalProjectIMDB.Models.Title", b =>
                {
                    b.Property<string>("TitleId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("titleID");

                    b.Property<short?>("EndYear")
                        .HasColumnType("smallint")
                        .HasColumnName("endYear");

                    b.Property<bool?>("IsAdult")
                        .HasColumnType("bit")
                        .HasColumnName("isAdult");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("originalTitle");

                    b.Property<string>("PrimaryTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("primaryTitle");

                    b.Property<short?>("RuntimeMinutes")
                        .HasColumnType("smallint")
                        .HasColumnName("runtimeMinutes");

                    b.Property<short?>("StartYear")
                        .HasColumnType("smallint")
                        .HasColumnName("startYear");

                    b.Property<string>("TitleType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("titleType");

                    b.HasKey("TitleId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("FinalProjectIMDB.Models.Director", b =>
                {
                    b.HasOne("FinalProjectIMDB.Models.Title", "Title")
                        .WithMany("Directors")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK_Directors_Titles1");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("FinalProjectIMDB.Models.Title", b =>
                {
                    b.Navigation("Directors");
                });
#pragma warning restore 612, 618
        }
    }
}
